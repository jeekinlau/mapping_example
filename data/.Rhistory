set.seed(123)
sample(length(genotype_matrix),size=round(length(genotype_matrix)*0.05),replace=F)
sample(length(genotype_matrix),size=round(length(genotype_matrix)*0.05),replace=F)
set.seed(123)
sample(length(genotype_matrix),size=round(length(genotype_matrix)*0.05),replace=F)
set.seed(123)
sample(length(genotype_matrix),size=round(length(genotype_matrix)*0.05),replace=F)
genotype_matrix[sample(length(genotype_matrix),size=round(length(genotype_matrix)*0.05),replace=F)]=NA
View(genotype_matrix)
cbind(data[,1:5],genotype_matrix)
final=cbind(data[,1:5],genotype_matrix)
View(final)
write.csv(final, "~/GitHub/mapping_example/data/BExMG_subset_5percent_missing.csv")
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_5percent_missing.csv", ploidy = 4)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_5percent_missing.csv", ploidy = 4)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.05, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.05, inter = F)
dat
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.10, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = F)
dat
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_5percent_missing.csv", ploidy = 4)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.10, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = F)
dat
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_5percent_missing.csv", ploidy = 4)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
plot(seq.init)
## Accounting for recombination fractions
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 6)
mat = rf_list_to_matrix(all.rf.pairwise)
plot(mat)
## Getting group information (UPGMA)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
plot(grs)
## Making groups with intersection between UPGMA (rf) + genomic information (discards scaffolds)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs.inter = lapply(LGS.inter, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA_Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.inter)){plot(rfs.inter[[i]])}
# mtext("Linkage groups with\nUPGMA + genomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups only with genomic information (tends to bring more markers, but also discards scaffolds)
LGS.genomic = vector("list", 7)
for (i in 1:7){
tempseq1 = make_seq_mappoly(dat, arg = paste0("seq",i), genomic.info = 1)
mrks = intersect(tempseq1$seq.mrk.names, seq.init$seq.mrk.names)
tempseq = make_seq_mappoly(dat, arg = mrks)
temptpt = make_pairs_mappoly(all.rf.pairwise, input.seq = tempseq)
rffilt = rf_snp_filter(input.twopt = temptpt, diagnostic.plot = FALSE)
temptpt2 = make_pairs_mappoly(temptpt, input.seq = rffilt)
LGS.genomic[[as.numeric(unique(rffilt$chrom))]] = list(seq = rffilt, tpt = temptpt2)
}
# ## Getting rf matrices
# rfs.genomic = lapply(LGS.genomic, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.genomic)){plot(rfs.genomic[[i]])}
# mtext("Linkage groups with\ngenomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups with UPGMA (rf) information (includes scaffolds)
LGS.upgma=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.upgma[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs = lapply(LGS.upgma, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs)){plot(rfs[[i]])}
# mtext("Linkage groups with\nUPGMA information\n(including scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Comparing number of markers in each group
comp = data.frame(UPGMA_Genomic = unlist(lapply(LGS.inter, function(x) length(x$seq$seq.num))),
Genomic = unlist(lapply(LGS.genomic, function(x) length(x$seq$seq.num))),
UPGMA = unlist(lapply(LGS.upgma, function(x) length(x$seq$seq.num))))
comp
LGS<-LGS.upgma
single_chrom <- est_rf_hmm_sequential(input.seq = LGS[[1]]$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = LGS[[1]]$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
## Performing parallel computation of hidden markov
phasing_and_hmm_rf <- function(X){
fl <- paste0("output_map_ch_", unique(X$seq$chrom), ".txt")
sink(fl)
map <- est_rf_hmm_sequential(input.seq = X$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = X$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
sink()
return(map)
}
# 5% genotyping error
my.error.func<-function(X){
x<-est_full_hmm_with_global_error(input.map = X,
error = 0.05,
tol = 10e-4,
verbose = FALSE)
return(x)
}
#upgma
#hidden markov based off physical location
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs <- parallel::parLapply(cl,LGS, phasing_and_hmm_rf)
parallel::stopCluster(cl)
plot_map_list(MAPs, col = "ggstyle")
# account for error
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs.err <- parallel::parLapply(cl,MAPs,my.error.func)
parallel::stopCluster(cl)
par(mfrow=c(2,1))
plot_map_list(MAPs, col = "ggstyle")
plot_map_list(MAPs.err, col = "ggstyle")
summary_maps(MAPs.err)
LGS<-LGS.inter
## Performing parallel computation of hidden markov
phasing_and_hmm_rf <- function(X){
fl <- paste0("output_map_ch_", unique(X$seq$chrom), ".txt")
sink(fl)
map <- est_rf_hmm_sequential(input.seq = X$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = X$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
sink()
return(map)
}
# 5% genotyping error
my.error.func<-function(X){
x<-est_full_hmm_with_global_error(input.map = X,
error = 0.05,
tol = 10e-4,
verbose = FALSE)
return(x)
}
#upgma
#hidden markov based off physical location
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs <- parallel::parLapply(cl,LGS, phasing_and_hmm_rf)
parallel::stopCluster(cl)
plot_map_list(MAPs, col = "ggstyle")
# account for error
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs.err <- parallel::parLapply(cl,MAPs,my.error.func)
parallel::stopCluster(cl)
par(mfrow=c(2,1))
plot_map_list(MAPs, col = "ggstyle")
plot_map_list(MAPs.err, col = "ggstyle")
set.seed(123)
genotype_matrix[sample(length(genotype_matrix),size=round(length(genotype_matrix)*0.1),replace=F)]=NA
final=cbind(data[,1:5],genotype_matrix)
write.csv(final, "~/GitHub/mapping_example/data/BExMG_subset_10percent_missing.csv")
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_10percent_missing.csv", ploidy = 4)
write.csv(final, "~/GitHub/mapping_example/data/BExMG_subset_10percent_missing.csv", row.names = F)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_10percent_missing.csv", ploidy = 4)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
plot(seq.init)
## Accounting for recombination fractions
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 6)
mat = rf_list_to_matrix(all.rf.pairwise)
plot(mat)
## Making groups with intersection between UPGMA (rf) + genomic information (discards scaffolds)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
## Getting group information (UPGMA)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
plot(grs)
## Making groups with intersection between UPGMA (rf) + genomic information (discards scaffolds)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs.inter = lapply(LGS.inter, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA_Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.inter)){plot(rfs.inter[[i]])}
# mtext("Linkage groups with\nUPGMA + genomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups only with genomic information (tends to bring more markers, but also discards scaffolds)
LGS.genomic = vector("list", 7)
for (i in 1:7){
tempseq1 = make_seq_mappoly(dat, arg = paste0("seq",i), genomic.info = 1)
mrks = intersect(tempseq1$seq.mrk.names, seq.init$seq.mrk.names)
tempseq = make_seq_mappoly(dat, arg = mrks)
temptpt = make_pairs_mappoly(all.rf.pairwise, input.seq = tempseq)
rffilt = rf_snp_filter(input.twopt = temptpt, diagnostic.plot = FALSE)
temptpt2 = make_pairs_mappoly(temptpt, input.seq = rffilt)
LGS.genomic[[as.numeric(unique(rffilt$chrom))]] = list(seq = rffilt, tpt = temptpt2)
}
# ## Getting rf matrices
# rfs.genomic = lapply(LGS.genomic, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.genomic)){plot(rfs.genomic[[i]])}
# mtext("Linkage groups with\ngenomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups with UPGMA (rf) information (includes scaffolds)
LGS.upgma=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.upgma[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs = lapply(LGS.upgma, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs)){plot(rfs[[i]])}
# mtext("Linkage groups with\nUPGMA information\n(including scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Comparing number of markers in each group
comp = data.frame(UPGMA_Genomic = unlist(lapply(LGS.inter, function(x) length(x$seq$seq.num))),
Genomic = unlist(lapply(LGS.genomic, function(x) length(x$seq$seq.num))),
UPGMA = unlist(lapply(LGS.upgma, function(x) length(x$seq$seq.num))))
comp
LGS<-LGS.inter
single_chrom <- est_rf_hmm_sequential(input.seq = LGS[[1]]$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = LGS[[1]]$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
LG1res
LG5sus = "X16035_N029, X16035_N031, X16035_N033, X16035_N038, X16035_N039, X16400_N047, X16400_N050, X16400_N052, X16400_N055, X16400_N062, X16405_N075, X16405_N076, X16405_N077, X16405_N081, X16405_N084, X16405_N086, X16405_N087, X16405_N088, X16405_N092, X16035_N016, X16035_N018, X16400_N020, X16400_N031, X16400_N035, X16400_N036, X16400_N040, X16400_N044, X16405_N048, X16405_N055, X16405_N059, X16405_N060, X16405_N062, X16405_N065, X16035_N046, X16035_N047, X16035_N049, X16035_N051, X16035_N056, X16400_N076, X16400_N086, X16400_N088, X16400_N089, X16400_N092, X16400_N093, X16400_N095, X16400_N098, X16405_N100, X16405_N101, X16405_N104, X16405_N105, X16405_N106, X16405_N110, X16405_N117, X16405_N122, X16400_N001, X16400_N002, X16400_N003, X16400_N005, X16400_N011, X16400_N014, X16400_N016, X16400_N017, X16405_N008, X16405_N013, X16405_N021, X16405_N024, X16405_N026, X16405_N028, X16405_N031, X16405_N034, X16405_N037, X16405_N039, X16405_N040, X16400_N102"
LG1res = strsplit(LG1res,", ")
LG1res = unlist(strsplit(LG1res,", "))
LG1res = unlist(strsplit(LG1res,", "))
LG1res
LG1res = unlist(strsplit(LG1res,", "))
LG1res
LG5sus = "X16035_N029, X16035_N031, X16035_N033, X16035_N038, X16035_N039, X16400_N047, X16400_N050, X16400_N052, X16400_N055, X16400_N062, X16405_N075, X16405_N076, X16405_N077, X16405_N081, X16405_N084, X16405_N086, X16405_N087, X16405_N088, X16405_N092, X16035_N016, X16035_N018, X16400_N020, X16400_N031, X16400_N035, X16400_N036, X16400_N040, X16400_N044, X16405_N048, X16405_N055, X16405_N059, X16405_N060, X16405_N062, X16405_N065, X16035_N046, X16035_N047, X16035_N049, X16035_N051, X16035_N056, X16400_N076, X16400_N086, X16400_N088, X16400_N089, X16400_N092, X16400_N093, X16400_N095, X16400_N098, X16405_N100, X16405_N101, X16405_N104, X16405_N105, X16405_N106, X16405_N110, X16405_N117, X16405_N122, X16400_N001, X16400_N002, X16400_N003, X16400_N005, X16400_N011, X16400_N014, X16400_N016, X16400_N017, X16405_N008, X16405_N013, X16405_N021, X16405_N024, X16405_N026, X16405_N028, X16405_N031, X16405_N034, X16405_N037, X16405_N039, X16405_N040, X16400_N102"
LG1res = unlist(strsplit(LG1res,", "))
LG5sus = unlist(strsplit(LG5sus,", "))
LG1res_LG5sus = intsersect(LG1res, LG5sus)
LG1res_LG5sus = intersect(LG1res, LG5sus)
LG1only = LG1res[which(!LG1res%in%LG5sus)]
LG5only = LG5sus[which(!LG5sus%in%LG1res)]
LG1res
LG5sus = "X16035_N029, X16035_N031, X16035_N033, X16035_N038, X16035_N039, X16400_N047, X16400_N050, X16400_N052, X16400_N055, X16400_N062, X16405_N075, X16405_N076, X16405_N077, X16405_N081, X16405_N084, X16405_N086, X16405_N087, X16405_N088, X16405_N092, X16035_N016, X16035_N018, X16400_N020, X16400_N031, X16400_N035, X16400_N036, X16400_N040, X16400_N044, X16405_N048, X16405_N055, X16405_N059, X16405_N060, X16405_N062, X16405_N065, X16035_N046, X16035_N047, X16035_N049, X16035_N051, X16035_N056, X16400_N076, X16400_N086, X16400_N088, X16400_N089, X16400_N092, X16400_N093, X16400_N095, X16400_N098, X16405_N100, X16405_N101, X16405_N104, X16405_N105, X16405_N106, X16405_N110, X16405_N117, X16405_N122, X16400_N001, X16400_N002, X16400_N003, X16400_N005, X16400_N011, X16400_N014, X16400_N016, X16400_N017, X16405_N008, X16405_N013, X16405_N021, X16405_N024, X16405_N026, X16405_N028, X16405_N031, X16405_N034, X16405_N037, X16405_N039, X16405_N040, X16400_N102"
LG1res = unlist(strsplit(LG1res,", "))
LG5sus = unlist(strsplit(LG5sus,", "))
LG1res_LG5sus = intersect(LG1res, LG5sus)
LG1only = LG1res[which(!LG1res%in%LG5sus)]
LG5only = LG5sus[which(!LG5sus%in%LG1res)]
pheno = read.csv("C:/Users/jeeki/Desktop/blackspot_paper/looking_at_lg1_lg5/blackspot_cercospora_defoliation_RRD.csv")
library(ggplot2)
pheno$cercQTL=NA
pheno$cercQTL[which(pheno$genotype%in%LG1only)]="LG1"
pheno$cercQTL[which(pheno$genotype%in%LG1only)]="LG1res"
pheno$cercQTL[which(pheno$genotype%in%LG5only)]="LG5sus"
pheno$cercQTL[which(pheno$genotype%in%LG1res_LG5sus)]="Both_LG1res_LG5sus"
ggplot(data=pheno,aes(cercQTL, cercospora))+
geom_boxplot()
ggplot(data=pheno,aes(cercQTL, cercospora))+
geom_boxplot()+
geom_gitter()
ggplot(data=pheno,aes(cercQTL, cercospora))+
geom_boxplot()+
geom_jitter()
pheno$cercQTL="noQTL"
pheno$cercQTL[which(pheno$genotype%in%LG1only)]="LG1res"
pheno$cercQTL[which(pheno$genotype%in%LG5only)]="LG5sus"
pheno$cercQTL[which(pheno$genotype%in%LG1res_LG5sus)]="Both_LG1res_LG5sus"
library(ggplot2)
ggplot(data=pheno,aes(cercQTL, cercospora))+
geom_boxplot()+
geom_jitter()
anova = aov(data=pheno, cercospora~cercQTL)
summary(anova)
TukeyHSD(anova)
mod <- lm(data=pheno, cercospora~cercQTL)
mod_means_contr <- emmeans::emmeans(object = mod,
pairwise ~ "Species",
adjust = "tukey")
mod_means_contr <- emmeans::emmeans(object = mod,
pairwise ~ "cercQTL",
adjust = "tukey")
mod_means <- multcomp::cld(object = mod_means_contr$emmeans,
Letters = letters)
mod_means
ggplot(data=pheno,aes(cercQTL, cercospora))+
geom_boxplot()+
geom_jitter()+
geom_text(data=mod_means,aes(label = gsub(" ", "", .group)),
position = position_nudge(x = 0.2))
ggplot(data=pheno,aes(cercQTL, cercospora))+
geom_boxplot()+
geom_jitter()+
geom_text(c("a","b"))
mod_means
TukeyHSD(anova)
library(polymapR)
dat = as.matrix(read.csv("D:/SWxBE_BExMG_recalled_exp/SWxBE_BExMG_v3_scores_compared_calls_v2_named.csv",))
head(dat)
PCA_progeny(dat)
dat = as.matrix(read.csv("D:/SWxBE_BExMG_recalled_exp/SWxBE_BExMG_v3_scores_compared_calls_v2_named.csv",row.names = 1))
PCA_progeny(dat)
colnames(dat)
dat[which(!is.na(dat[,"Brite_Eyes_8")]),]
dat[which(!is.na(dat[,"Brite_Eyes_8"]),]
dat[which(!is.na(dat[,"Brite_Eyes_8"])),]
dat=dat[which(!is.na(dat[,"Brite_Eyes_8"])),]
PCA_progeny(dat)
viewpoly::run_app()
data = read.csv(C:/Users/jeeki/Desktop/blackspot_paper/BExMG/all_locations_all_traits_BLUEs.csv")
data = read.csv("C:/Users/jeeki/Desktop/blackspot_paper/BExMG/all_locations_all_traits_BLUEs.csv")
View(data)
cerc5 = "X16035_N029, X16035_N031, X16035_N033, X16035_N038, X16035_N039, X16400_N047, X16400_N050, X16400_N052, X16400_N055, X16400_N062, X16405_N075, X16405_N076, X16405_N077, X16405_N081, X16405_N084, X16405_N086, X16405_N087, X16405_N088, X16405_N092, X16035_N016, X16035_N018, X16400_N020, X16400_N031, X16400_N035, X16400_N036, X16400_N040, X16400_N044, X16405_N048, X16405_N055, X16405_N059, X16405_N060, X16405_N062, X16405_N065, X16035_N046, X16035_N047, X16035_N049, X16035_N051, X16035_N056, X16400_N076, X16400_N086, X16400_N088, X16400_N089, X16400_N092, X16400_N093, X16400_N095, X16400_N098, X16405_N100, X16405_N101, X16405_N104, X16405_N105, X16405_N106, X16405_N110, X16405_N117, X16405_N122, X16400_N001, X16400_N002, X16400_N003, X16400_N005, X16400_N011, X16400_N014, X16400_N016, X16400_N017, X16405_N008, X16405_N013, X16405_N021, X16405_N024, X16405_N026, X16405_N028, X16405_N031, X16405_N034, X16405_N037, X16405_N039, X16405_N040, X16400_N102 X16009_N001, X16009_N023, X16009_N026, X16009_N027, X16009_N030, X16009_N032, X16009_N034, X16009_N035, X16009_N039, X16009_N044, X16009_N045, X16009_N046, X16009_N055, X16009_N057, X16009_N058, X16009_N059, X16009_N061, X16009_N066, X16009_N070, X16009_N074, X16009_N075, X16009_N076, X16009_N083, X16009_N087, X16009_N090, X16009_N094, X16009_N098, X16009_N100, X16009_N101, X16009_N104, X16009_N107, X16009_N108, X16009_N111, X16009_N114, X16009_N115, X16009_N124, X16009_N126, X16009_N131, X16009_N133, X16009_N136, X16009_N139, X16009_N160, X16009_N162, X16009_N163, X16009_N165, X16009_N166, X16009_N168, X16009_N170, X16009_N171, X16009_N173, X16009_N176, X16009_N181, X16009_N182, X16009_N186, X16009_N190, X16401_N003, X16401_N015, X16401_N017, X16401_N026, X16401_N028, X16401_N031, X16401_N034, X16401_N037, X16401_N038, X16401_N042, X16401_N045, X16401_N047, X16401_N052, X16401_N053, X16401_N055, X16401_N057, X16401_N064, X16401_N065, X16401_N069, X16401_N070, X16401_N071, X16401_N073, X16401_N076, X16401_N082, X16401_N086, X16401_N089, X16401_N092, X16401_N093, X16401_N095, X16401_N101, X16401_N103, X16401_N106, X16401_N107, X16401_N108, X16401_N111, X16401_N113, X16401_N119, X16400_N065, X16400_N101"
cerc1 = "X16035_N028, X16035_N029, X16035_N031, X16035_N032, X16035_N033, X16035_N034, X16035_N035, X16035_N038, X16035_N039, X16400_N047, X16400_N051, X16400_N053, X16400_N057, X16400_N058, X16400_N069, X16405_N075, X16405_N077, X16405_N082, X16405_N084, X16405_N086, X16405_N087, X16405_N093, X16405_N095, X16405_N098, X16405_N099, X16035_N017, X16035_N024, X16035_N025, X16400_N020, X16400_N021, X16400_N031, X16400_N035, X16400_N041, X16400_N044, X16405_N041, X16405_N044, X16405_N045, X16405_N046, X16405_N047, X16405_N048, X16405_N050, X16405_N053, X16405_N059, X16405_N060, X16405_N070, X16035_N040, X16035_N042, X16035_N044, X16035_N045, X16035_N046, X16035_N047, X16400_N073, X16400_N080, X16400_N084, X16400_N092, X16400_N093, X16400_N095, X16400_N100, X16405_N102, X16405_N103, X16405_N104, X16405_N105, X16405_N106, X16405_N115, X16405_N120, X16405_N123, X16405_N125, X16400_N002, X16400_N003, X16400_N005, X16400_N010, X16400_N013, X16400_N017, X16405_N006, X16405_N023, X16405_N024, X16405_N026, X16405_N030, X16405_N035, X16405_N036, X16405_N037, X16405_N040, X16035_N058, X16405_N127 X16009_N001, X16009_N011, X16009_N013, X16009_N014, X16009_N015, X16009_N016, X16009_N018, X16009_N021, X16009_N023, X16009_N026, X16009_N032, X16009_N033, X16009_N035, X16009_N036, X16009_N037, X16009_N044, X16009_N057, X16009_N060, X16009_N061, X16009_N063, X16009_N064, X16009_N066, X16009_N067, X16009_N072, X16009_N074, X16009_N075, X16009_N077, X16009_N078, X16009_N079, X16009_N083, X16009_N092, X16009_N094, X16009_N098, X16009_N099, X16009_N100, X16009_N101, X16009_N103, X16009_N104, X16009_N105, X16009_N107, X16009_N108, X16009_N111, X16009_N113, X16009_N115, X16009_N128, X16009_N133, X16009_N134, X16009_N138, X16009_N143, X16009_N144, X16009_N164, X16009_N166, X16009_N168, X16009_N169, X16009_N171, X16009_N174, X16009_N181, X16009_N182, X16009_N183, X16009_N188, X16009_N190, X16009_N192, X16401_N001, X16401_N003, X16401_N008, X16401_N011, X16401_N015, X16401_N021, X16401_N025, X16401_N026, X16401_N028, X16401_N029, X16401_N033, X16401_N034, X16401_N035, X16401_N038, X16401_N040, X16401_N042, X16401_N043, X16401_N052, X16401_N055, X16401_N056, X16401_N057, X16401_N059, X16401_N060, X16401_N067, X16401_N069, X16401_N071, X16401_N073, X16401_N076, X16401_N078, X16401_N080, X16401_N081, X16401_N086, X16401_N087, X16401_N088, X16401_N089, X16401_N090, X16401_N092, X16401_N093, X16401_N094, X16401_N095, X16401_N098, X16401_N101, X16401_N102, X16401_N107, X16401_N112, X16401_N113, X16401_N114, X16401_N118, X16401_N119, X16400_N054, X16400_N101"
strsplit(cerc5,", ")
cerc5=strsplit(cerc5,", ")
cerc1=strsplit(cerc1,", ")
cerc5 = "X16035_N029, X16035_N031, X16035_N033, X16035_N038, X16035_N039, X16400_N047, X16400_N050, X16400_N052, X16400_N055, X16400_N062, X16405_N075, X16405_N076, X16405_N077, X16405_N081, X16405_N084, X16405_N086, X16405_N087, X16405_N088, X16405_N092, X16035_N016, X16035_N018, X16400_N020, X16400_N031, X16400_N035, X16400_N036, X16400_N040, X16400_N044, X16405_N048, X16405_N055, X16405_N059, X16405_N060, X16405_N062, X16405_N065, X16035_N046, X16035_N047, X16035_N049, X16035_N051, X16035_N056, X16400_N076, X16400_N086, X16400_N088, X16400_N089, X16400_N092, X16400_N093, X16400_N095, X16400_N098, X16405_N100, X16405_N101, X16405_N104, X16405_N105, X16405_N106, X16405_N110, X16405_N117, X16405_N122, X16400_N001, X16400_N002, X16400_N003, X16400_N005, X16400_N011, X16400_N014, X16400_N016, X16400_N017, X16405_N008, X16405_N013, X16405_N021, X16405_N024, X16405_N026, X16405_N028, X16405_N031, X16405_N034, X16405_N037, X16405_N039, X16405_N040, X16400_N102 X16009_N001, X16009_N023, X16009_N026, X16009_N027, X16009_N030, X16009_N032, X16009_N034, X16009_N035, X16009_N039, X16009_N044, X16009_N045, X16009_N046, X16009_N055, X16009_N057, X16009_N058, X16009_N059, X16009_N061, X16009_N066, X16009_N070, X16009_N074, X16009_N075, X16009_N076, X16009_N083, X16009_N087, X16009_N090, X16009_N094, X16009_N098, X16009_N100, X16009_N101, X16009_N104, X16009_N107, X16009_N108, X16009_N111, X16009_N114, X16009_N115, X16009_N124, X16009_N126, X16009_N131, X16009_N133, X16009_N136, X16009_N139, X16009_N160, X16009_N162, X16009_N163, X16009_N165, X16009_N166, X16009_N168, X16009_N170, X16009_N171, X16009_N173, X16009_N176, X16009_N181, X16009_N182, X16009_N186, X16009_N190, X16401_N003, X16401_N015, X16401_N017, X16401_N026, X16401_N028, X16401_N031, X16401_N034, X16401_N037, X16401_N038, X16401_N042, X16401_N045, X16401_N047, X16401_N052, X16401_N053, X16401_N055, X16401_N057, X16401_N064, X16401_N065, X16401_N069, X16401_N070, X16401_N071, X16401_N073, X16401_N076, X16401_N082, X16401_N086, X16401_N089, X16401_N092, X16401_N093, X16401_N095, X16401_N101, X16401_N103, X16401_N106, X16401_N107, X16401_N108, X16401_N111, X16401_N113, X16401_N119, X16400_N065, X16400_N101"
cerc1 = "X16035_N028, X16035_N029, X16035_N031, X16035_N032, X16035_N033, X16035_N034, X16035_N035, X16035_N038, X16035_N039, X16400_N047, X16400_N051, X16400_N053, X16400_N057, X16400_N058, X16400_N069, X16405_N075, X16405_N077, X16405_N082, X16405_N084, X16405_N086, X16405_N087, X16405_N093, X16405_N095, X16405_N098, X16405_N099, X16035_N017, X16035_N024, X16035_N025, X16400_N020, X16400_N021, X16400_N031, X16400_N035, X16400_N041, X16400_N044, X16405_N041, X16405_N044, X16405_N045, X16405_N046, X16405_N047, X16405_N048, X16405_N050, X16405_N053, X16405_N059, X16405_N060, X16405_N070, X16035_N040, X16035_N042, X16035_N044, X16035_N045, X16035_N046, X16035_N047, X16400_N073, X16400_N080, X16400_N084, X16400_N092, X16400_N093, X16400_N095, X16400_N100, X16405_N102, X16405_N103, X16405_N104, X16405_N105, X16405_N106, X16405_N115, X16405_N120, X16405_N123, X16405_N125, X16400_N002, X16400_N003, X16400_N005, X16400_N010, X16400_N013, X16400_N017, X16405_N006, X16405_N023, X16405_N024, X16405_N026, X16405_N030, X16405_N035, X16405_N036, X16405_N037, X16405_N040, X16035_N058, X16405_N127 X16009_N001, X16009_N011, X16009_N013, X16009_N014, X16009_N015, X16009_N016, X16009_N018, X16009_N021, X16009_N023, X16009_N026, X16009_N032, X16009_N033, X16009_N035, X16009_N036, X16009_N037, X16009_N044, X16009_N057, X16009_N060, X16009_N061, X16009_N063, X16009_N064, X16009_N066, X16009_N067, X16009_N072, X16009_N074, X16009_N075, X16009_N077, X16009_N078, X16009_N079, X16009_N083, X16009_N092, X16009_N094, X16009_N098, X16009_N099, X16009_N100, X16009_N101, X16009_N103, X16009_N104, X16009_N105, X16009_N107, X16009_N108, X16009_N111, X16009_N113, X16009_N115, X16009_N128, X16009_N133, X16009_N134, X16009_N138, X16009_N143, X16009_N144, X16009_N164, X16009_N166, X16009_N168, X16009_N169, X16009_N171, X16009_N174, X16009_N181, X16009_N182, X16009_N183, X16009_N188, X16009_N190, X16009_N192, X16401_N001, X16401_N003, X16401_N008, X16401_N011, X16401_N015, X16401_N021, X16401_N025, X16401_N026, X16401_N028, X16401_N029, X16401_N033, X16401_N034, X16401_N035, X16401_N038, X16401_N040, X16401_N042, X16401_N043, X16401_N052, X16401_N055, X16401_N056, X16401_N057, X16401_N059, X16401_N060, X16401_N067, X16401_N069, X16401_N071, X16401_N073, X16401_N076, X16401_N078, X16401_N080, X16401_N081, X16401_N086, X16401_N087, X16401_N088, X16401_N089, X16401_N090, X16401_N092, X16401_N093, X16401_N094, X16401_N095, X16401_N098, X16401_N101, X16401_N102, X16401_N107, X16401_N112, X16401_N113, X16401_N114, X16401_N118, X16401_N119, X16400_N054, X16400_N101"
cerc5=unlist(strsplit(cerc5,", "))
cerc1=(strsplit(cerc1,", "))
cerc5 = "X16035_N029, X16035_N031, X16035_N033, X16035_N038, X16035_N039, X16400_N047, X16400_N050, X16400_N052, X16400_N055, X16400_N062, X16405_N075, X16405_N076, X16405_N077, X16405_N081, X16405_N084, X16405_N086, X16405_N087, X16405_N088, X16405_N092, X16035_N016, X16035_N018, X16400_N020, X16400_N031, X16400_N035, X16400_N036, X16400_N040, X16400_N044, X16405_N048, X16405_N055, X16405_N059, X16405_N060, X16405_N062, X16405_N065, X16035_N046, X16035_N047, X16035_N049, X16035_N051, X16035_N056, X16400_N076, X16400_N086, X16400_N088, X16400_N089, X16400_N092, X16400_N093, X16400_N095, X16400_N098, X16405_N100, X16405_N101, X16405_N104, X16405_N105, X16405_N106, X16405_N110, X16405_N117, X16405_N122, X16400_N001, X16400_N002, X16400_N003, X16400_N005, X16400_N011, X16400_N014, X16400_N016, X16400_N017, X16405_N008, X16405_N013, X16405_N021, X16405_N024, X16405_N026, X16405_N028, X16405_N031, X16405_N034, X16405_N037, X16405_N039, X16405_N040, X16400_N102 X16009_N001, X16009_N023, X16009_N026, X16009_N027, X16009_N030, X16009_N032, X16009_N034, X16009_N035, X16009_N039, X16009_N044, X16009_N045, X16009_N046, X16009_N055, X16009_N057, X16009_N058, X16009_N059, X16009_N061, X16009_N066, X16009_N070, X16009_N074, X16009_N075, X16009_N076, X16009_N083, X16009_N087, X16009_N090, X16009_N094, X16009_N098, X16009_N100, X16009_N101, X16009_N104, X16009_N107, X16009_N108, X16009_N111, X16009_N114, X16009_N115, X16009_N124, X16009_N126, X16009_N131, X16009_N133, X16009_N136, X16009_N139, X16009_N160, X16009_N162, X16009_N163, X16009_N165, X16009_N166, X16009_N168, X16009_N170, X16009_N171, X16009_N173, X16009_N176, X16009_N181, X16009_N182, X16009_N186, X16009_N190, X16401_N003, X16401_N015, X16401_N017, X16401_N026, X16401_N028, X16401_N031, X16401_N034, X16401_N037, X16401_N038, X16401_N042, X16401_N045, X16401_N047, X16401_N052, X16401_N053, X16401_N055, X16401_N057, X16401_N064, X16401_N065, X16401_N069, X16401_N070, X16401_N071, X16401_N073, X16401_N076, X16401_N082, X16401_N086, X16401_N089, X16401_N092, X16401_N093, X16401_N095, X16401_N101, X16401_N103, X16401_N106, X16401_N107, X16401_N108, X16401_N111, X16401_N113, X16401_N119, X16400_N065, X16400_N101"
cerc1 = "X16035_N028, X16035_N029, X16035_N031, X16035_N032, X16035_N033, X16035_N034, X16035_N035, X16035_N038, X16035_N039, X16400_N047, X16400_N051, X16400_N053, X16400_N057, X16400_N058, X16400_N069, X16405_N075, X16405_N077, X16405_N082, X16405_N084, X16405_N086, X16405_N087, X16405_N093, X16405_N095, X16405_N098, X16405_N099, X16035_N017, X16035_N024, X16035_N025, X16400_N020, X16400_N021, X16400_N031, X16400_N035, X16400_N041, X16400_N044, X16405_N041, X16405_N044, X16405_N045, X16405_N046, X16405_N047, X16405_N048, X16405_N050, X16405_N053, X16405_N059, X16405_N060, X16405_N070, X16035_N040, X16035_N042, X16035_N044, X16035_N045, X16035_N046, X16035_N047, X16400_N073, X16400_N080, X16400_N084, X16400_N092, X16400_N093, X16400_N095, X16400_N100, X16405_N102, X16405_N103, X16405_N104, X16405_N105, X16405_N106, X16405_N115, X16405_N120, X16405_N123, X16405_N125, X16400_N002, X16400_N003, X16400_N005, X16400_N010, X16400_N013, X16400_N017, X16405_N006, X16405_N023, X16405_N024, X16405_N026, X16405_N030, X16405_N035, X16405_N036, X16405_N037, X16405_N040, X16035_N058, X16405_N127 X16009_N001, X16009_N011, X16009_N013, X16009_N014, X16009_N015, X16009_N016, X16009_N018, X16009_N021, X16009_N023, X16009_N026, X16009_N032, X16009_N033, X16009_N035, X16009_N036, X16009_N037, X16009_N044, X16009_N057, X16009_N060, X16009_N061, X16009_N063, X16009_N064, X16009_N066, X16009_N067, X16009_N072, X16009_N074, X16009_N075, X16009_N077, X16009_N078, X16009_N079, X16009_N083, X16009_N092, X16009_N094, X16009_N098, X16009_N099, X16009_N100, X16009_N101, X16009_N103, X16009_N104, X16009_N105, X16009_N107, X16009_N108, X16009_N111, X16009_N113, X16009_N115, X16009_N128, X16009_N133, X16009_N134, X16009_N138, X16009_N143, X16009_N144, X16009_N164, X16009_N166, X16009_N168, X16009_N169, X16009_N171, X16009_N174, X16009_N181, X16009_N182, X16009_N183, X16009_N188, X16009_N190, X16009_N192, X16401_N001, X16401_N003, X16401_N008, X16401_N011, X16401_N015, X16401_N021, X16401_N025, X16401_N026, X16401_N028, X16401_N029, X16401_N033, X16401_N034, X16401_N035, X16401_N038, X16401_N040, X16401_N042, X16401_N043, X16401_N052, X16401_N055, X16401_N056, X16401_N057, X16401_N059, X16401_N060, X16401_N067, X16401_N069, X16401_N071, X16401_N073, X16401_N076, X16401_N078, X16401_N080, X16401_N081, X16401_N086, X16401_N087, X16401_N088, X16401_N089, X16401_N090, X16401_N092, X16401_N093, X16401_N094, X16401_N095, X16401_N098, X16401_N101, X16401_N102, X16401_N107, X16401_N112, X16401_N113, X16401_N114, X16401_N118, X16401_N119, X16400_N054, X16400_N101"
cerc5=unlist(strsplit(cerc5,", "))
cerc1=unlist(strsplit(cerc1,", "))
both_cerc1_5 = intersect(cerc1,cerc5)
cerc1_only=cerc1[!cerc1%in%both_cerc1_5]
cerc5_only=cerc5[!cerc5%in%both_cerc1_5]
data$QTL=NA
which(data$genotype==cerc1_only)
which(data$genotype%in%cerc1_only)
data$QTL[which(data$genotype%in%cerc1_only)]="cerc1"
data$QTL[which(data$genotype%in%cerc5_only)]="cerc5"
data$QTL[which(data$genotype%in%both_cerc1_5)]="both"
View(data)
boxplot(data$overall_BLUEs_C~data$QTL)
aov(data$overall_BLUEs_C~data$QTL)
anova=aov(data$overall_BLUEs_C~data$QTL)
summary(anova)
TukeyHSD(anova)
HSD.test(anova, "QTL", group=TRUE)
library(agricolae)
HSD.test(anova, "QTL", group=TRUE)
install.packages("agricolae")
library(agricolae)
HSD.test(anova, "QTL", group=TRUE)
HSD.test(anova, "data$QTL", group=TRUE)
HSD.test(anova, "data$QTL", group=TRUE)
HSD.test(anova, "data$QTL", group=TRUE)
HSD.test(anova, group=TRUE)
TukeyHSD(anova)
HSD.test(anova,"data$QTL", group=TRUE)
library(multcomp)
cld(anova)
tuk <- glht(anova, linfct = mcp(tx = "Tukey"))
tuk <- glht(anova, linfct = mcp(data$QTL = "Tukey"))
HSD.test(anova,"data$QTL")
print(HSD.test(anova,"data$QTL"))
print(HSD.test(anova,"data$QTL". group=T))
print(HSD.test(anova,"data$QTL", group=T))
library(ggplot2)
ggplot(data, aes(QTL, overall_BLUEs_C))+geom_dotplot()
data$QTL=as.factor(data$QTL)
ggplot(data, aes(QTL, overall_BLUEs_C))+geom_dotplot()
ggplot(data, aes(QTL, overall_BLUEs_C))+geom_boxplot()
p=ggplot(data, aes(QTL, overall_BLUEs_C))+geom_boxplot()
p + geom_jitter(shape=16, position=position_jitter(0.2))
data_rm_NA = data[which(!is.na((data$QTL)),]
which(!is.na((data$QTL))
data_rm_NA = data[which(!is.na((data$QTL))),]
View(data_rm_NA)
p=ggplot(data_rm_NA, aes(QTL, overall_BLUEs_C))+geom_boxplot()
p + geom_jitter(shape=16, position=position_jitter(0.2))
p$labels$y= "Cercospora BLUEs"
p
p=p + geom_jitter(shape=16, position=position_jitter(0.2))
p$labels$y= "Cercospora BLUEs"
p
p=ggplot(data, aes(QTL, overall_BLUEs_C))+geom_boxplot()
p=p + geom_jitter(shape=16, position=position_jitter(0.2))+ggtitle("Cercspora BLUEs by QTL composition of individuals")
p$labels$y= "Cercospora BLUEs"
p$
p
p=ggplot(data, aes(QTL, overall_BLUEs_C))+geom_boxplot()
p=p + geom_jitter(shape=16, position=position_jitter(0.2))+ggtitle("Cercspora BLUEs by QTL composition of individuals")
p$labels$y= "Cercospora BLUEs"
p
p=ggplot(data_rm_NA, aes(QTL, overall_BLUEs_C))+geom_boxplot()
p=p + geom_jitter(shape=16, position=position_jitter(0.2))+ggtitle("Cercspora BLUEs by QTL composition of individuals")
p$labels$y= "Cercospora BLUEs"
p
data_rm_NA = data[which(!is.na((data$QTL))),]
p=ggplot(data_rm_NA, aes(QTL, overall_BLUEs_C))+geom_boxplot()
p=p + geom_jitter(shape=16, position=position_jitter(0.2))+ggtitle("Cercspora BLUEs by QTL Composition of Individuals")
p$labels$y= "Cercospora BLUEs"
p
install.packages("RecordLinkage")
shiny::runApp('GitHub/viewpoly_for_disease_paper')
runApp('GitHub/viewpoly_forserver')
devtools::install_github("mchizk1/ShinyFruit", build_vignettes = T)
ShinyFruit::ShinyFruit()
setwd("C:/Users/jeeki/Documents/GitHub/mapping_example/data")
data=read.csv('BExMG_subset_with_contaminants.csv')
data=data[seq(1,nrow(data),2),]
write.csv('BExMG_subset_with_contaminants_3113mrks.csv',row.names = F)
write.csv(data,'BExMG_subset_with_contaminants_3113mrks.csv',row.names = F)
data=data[seq(1,nrow(data),3),]
data=data[seq(1,nrow(data),2),]
data=read.csv('BExMG_subset_with_contaminants.csv')
data=data[seq(1,nrow(data),2),]
data=read.csv('BExMG_subset_with_contaminants.csv')
data=data[seq(1,nrow(data),3),]
write.csv(data,'BExMG_subset_with_contaminants_2075mrks.csv',row.names = F)
