cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs.err <- parallel::parLapply(cl,MAPs,my.error.func)
parallel::stopCluster(cl)
par(mfrow=c(2,1))
plot_map_list(MAPs, col = "ggstyle")
plot_map_list(MAPs.err, col = "ggstyle")
set.seed(123)
genotype_matrix[sample(length(genotype_matrix),size=round(length(genotype_matrix)*0.1),replace=F)]=NA
final=cbind(data[,1:5],genotype_matrix)
write.csv(final, "~/GitHub/mapping_example/data/BExMG_subset_10percent_missing.csv")
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_10percent_missing.csv", ploidy = 4)
write.csv(final, "~/GitHub/mapping_example/data/BExMG_subset_10percent_missing.csv", row.names = F)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_10percent_missing.csv", ploidy = 4)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
plot(seq.init)
## Accounting for recombination fractions
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 6)
mat = rf_list_to_matrix(all.rf.pairwise)
plot(mat)
## Making groups with intersection between UPGMA (rf) + genomic information (discards scaffolds)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
## Getting group information (UPGMA)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
plot(grs)
## Making groups with intersection between UPGMA (rf) + genomic information (discards scaffolds)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs.inter = lapply(LGS.inter, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA_Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.inter)){plot(rfs.inter[[i]])}
# mtext("Linkage groups with\nUPGMA + genomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups only with genomic information (tends to bring more markers, but also discards scaffolds)
LGS.genomic = vector("list", 7)
for (i in 1:7){
tempseq1 = make_seq_mappoly(dat, arg = paste0("seq",i), genomic.info = 1)
mrks = intersect(tempseq1$seq.mrk.names, seq.init$seq.mrk.names)
tempseq = make_seq_mappoly(dat, arg = mrks)
temptpt = make_pairs_mappoly(all.rf.pairwise, input.seq = tempseq)
rffilt = rf_snp_filter(input.twopt = temptpt, diagnostic.plot = FALSE)
temptpt2 = make_pairs_mappoly(temptpt, input.seq = rffilt)
LGS.genomic[[as.numeric(unique(rffilt$chrom))]] = list(seq = rffilt, tpt = temptpt2)
}
# ## Getting rf matrices
# rfs.genomic = lapply(LGS.genomic, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.genomic)){plot(rfs.genomic[[i]])}
# mtext("Linkage groups with\ngenomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups with UPGMA (rf) information (includes scaffolds)
LGS.upgma=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.upgma[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs = lapply(LGS.upgma, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs)){plot(rfs[[i]])}
# mtext("Linkage groups with\nUPGMA information\n(including scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Comparing number of markers in each group
comp = data.frame(UPGMA_Genomic = unlist(lapply(LGS.inter, function(x) length(x$seq$seq.num))),
Genomic = unlist(lapply(LGS.genomic, function(x) length(x$seq$seq.num))),
UPGMA = unlist(lapply(LGS.upgma, function(x) length(x$seq$seq.num))))
comp
LGS<-LGS.inter
single_chrom <- est_rf_hmm_sequential(input.seq = LGS[[1]]$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = LGS[[1]]$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset.csv", ploidy = 4)
dat_vcf_test = read_vcf("https://github.com/mmollina/MAPpoly_vignettes/raw/master/data/BT/sweetpotato_chr1.vcf.gz")
library(vcfR)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset.csv", ploidy = 4)
dat_vcf_test = read_vcf("../data/sweetpotato_chr1.vcf.gz")
vcf=read.vcfR("../data/sweetpotato_chr1.vcf.gz")
vcf=read.vcfR("~/GitHub/mapping_example/tutorial/data/sweetpotato_chr1.vcf.gz")
setwd("~/GitHub/mapping_example/tutorial")
vcf=read.vcfR("../data/sweetpotato_chr1.vcf.gz")
vcf@gt
dat_vcf_test = read_vcf("../data/sweetpotato_chr1.vcf.gz", parent.1 = "PARENT1", parent.2 = "PARENT2")
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.10, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = F)
dat
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.10, inter = F)
dat
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
dat
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
dat
print(dat)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.10, inter = T)
dat
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = F)
dat
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = T)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = T)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.10, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.10, inter = F)
dat
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.25, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.25, inter = F)
dat
View(dat)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
View(dat)
dat[["geno.dose"]]
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.25, inter = T)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
library(polymapR)
ALL_dosages =  export_data_to_polymapR(dat)
screened_data <- screen_for_duplicate_individuals(dosage_matrix = ALL_dosages,
cutoff = 0.95,
plot_cor = T)
PCA_progeny(screened_data)
View(dat)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4, filter.non.conforming = F)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.05, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.05, inter = F)
dat
dat_vcf_test = read_vcf("../data/sweetpotato_chr1.vcf.gz", parent.1 = "PARENT1", parent.2 = "PARENT2")
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4, filter.non.conforming = F)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.1, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.1, inter = F)
dat
library(polymapR)
ALL_dosages =  export_data_to_polymapR(dat)
screened_data <- screen_for_duplicate_individuals(dosage_matrix = ALL_dosages,
cutoff = 0.95,
plot_cor = T)
PCA_progeny(screened_data)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
View(mrks.chi.filt)
seq.init = make_seq_mappoly(dat, "all")
seq.init
plot(seq.init)
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 6)
mat = rf_list_to_matrix(all.rf.pairwise)
plot(mat)
## Getting group information (UPGMA)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
plot(grs)
## Making groups with intersection between UPGMA (rf) + genomic information (discards scaffolds)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs.inter = lapply(LGS.inter, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA_Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.inter)){plot(rfs.inter[[i]])}
# mtext("Linkage groups with\nUPGMA + genomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups only with genomic information (tends to bring more markers, but also discards scaffolds)
LGS.genomic = vector("list", 7)
for (i in 1:7){
tempseq1 = make_seq_mappoly(dat, arg = paste0("seq",i), genomic.info = 1)
mrks = intersect(tempseq1$seq.mrk.names, seq.init$seq.mrk.names)
tempseq = make_seq_mappoly(dat, arg = mrks)
temptpt = make_pairs_mappoly(all.rf.pairwise, input.seq = tempseq)
rffilt = rf_snp_filter(input.twopt = temptpt, diagnostic.plot = FALSE)
temptpt2 = make_pairs_mappoly(temptpt, input.seq = rffilt)
LGS.genomic[[as.numeric(unique(rffilt$chrom))]] = list(seq = rffilt, tpt = temptpt2)
}
# ## Getting rf matrices
# rfs.genomic = lapply(LGS.genomic, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.genomic)){plot(rfs.genomic[[i]])}
# mtext("Linkage groups with\ngenomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups with UPGMA (rf) information (includes scaffolds)
LGS.upgma=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.upgma[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs = lapply(LGS.upgma, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs)){plot(rfs[[i]])}
# mtext("Linkage groups with\nUPGMA information\n(including scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Comparing number of markers in each group
comp = data.frame(UPGMA_Genomic = unlist(lapply(LGS.inter, function(x) length(x$seq$seq.num))),
Genomic = unlist(lapply(LGS.genomic, function(x) length(x$seq$seq.num))),
UPGMA = unlist(lapply(LGS.upgma, function(x) length(x$seq$seq.num))))
comp
LGS<-LGS.inter
## Performing parallel computation of hidden markov
phasing_and_hmm_rf <- function(X){
fl <- paste0("output_map_ch_", unique(X$seq$chrom), ".txt")
sink(fl)
map <- est_rf_hmm_sequential(input.seq = X$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = X$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
sink()
return(map)
}
# 5% genotyping error
my.error.func<-function(X){
x<-est_full_hmm_with_global_error(input.map = X,
error = 0.05,
tol = 10e-4,
verbose = FALSE)
return(x)
}
#upgma
#hidden markov based off physical location
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs <- parallel::parLapply(cl,LGS, phasing_and_hmm_rf)
## Performing parallel computation of hidden markov
phasing_and_hmm_rf <- function(X){
fl <- paste0("output_map_ch_", unique(X$seq$chrom), ".txt")
sink(fl)
map <- est_rf_hmm_sequential(input.seq = X$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = X$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
sink()
return(map)
}
# 5% genotyping error
my.error.func<-function(X){
x<-est_full_hmm_with_global_error(input.map = X,
error = 0.05,
tol = 10e-4,
verbose = FALSE)
return(x)
}
#upgma
#hidden markov based off physical location
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs <- parallel::parLapply(cl,LGS, phasing_and_hmm_rf)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset_contaminated.csv", ploidy = 4)
dat_vcf_test = read_vcf("../data/sweetpotato_chr1.vcf.gz", parent.1 = "PARENT1", parent.2 = "PARENT2")
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.5, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.5, inter = F)
dat
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init = make_seq_mappoly(dat, "all")
seq.init
plot(seq.init)
## Accounting for recombination fractions
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 6)
mat = rf_list_to_matrix(all.rf.pairwise)
plot(mat)
## Getting group information (UPGMA)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
plot(grs)
## Making groups with intersection between UPGMA (rf) + genomic information (discards scaffolds)
LGS.inter=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j, genomic.info=1)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.inter[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs.inter = lapply(LGS.inter, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA_Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.inter)){plot(rfs.inter[[i]])}
# mtext("Linkage groups with\nUPGMA + genomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups only with genomic information (tends to bring more markers, but also discards scaffolds)
LGS.genomic = vector("list", 7)
for (i in 1:7){
tempseq1 = make_seq_mappoly(dat, arg = paste0("seq",i), genomic.info = 1)
mrks = intersect(tempseq1$seq.mrk.names, seq.init$seq.mrk.names)
tempseq = make_seq_mappoly(dat, arg = mrks)
temptpt = make_pairs_mappoly(all.rf.pairwise, input.seq = tempseq)
rffilt = rf_snp_filter(input.twopt = temptpt, diagnostic.plot = FALSE)
temptpt2 = make_pairs_mappoly(temptpt, input.seq = rffilt)
LGS.genomic[[as.numeric(unique(rffilt$chrom))]] = list(seq = rffilt, tpt = temptpt2)
}
# ## Getting rf matrices
# rfs.genomic = lapply(LGS.genomic, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="Genomic.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs.genomic)){plot(rfs.genomic[[i]])}
# mtext("Linkage groups with\ngenomic information\n(discarding scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Making groups with UPGMA (rf) information (includes scaffolds)
LGS.upgma=vector("list", 7)
for(j in 1:7){
temp1 = make_seq_mappoly(grs, j)
tpt = make_pairs_mappoly(all.rf.pairwise, input.seq = temp1)
temp2 = rf_snp_filter(input.twopt = tpt, diagnostic.plot = FALSE)
tpt2 = make_pairs_mappoly(tpt, input.seq = temp2)
LGS.upgma[[as.numeric(names(table(temp2$chrom))[which.max(table(temp2$chrom))])]] = list(seq = temp2, tpt = tpt2)
}
# ## Getting rf matrices
# rfs = lapply(LGS.upgma, function(x) rf_list_to_matrix(x$tpt))
# ## Plotting rf matrices
# #png(file="UPGMA.png", width = 1600, height = 800)
# par(mfrow=c(2,4))
# for (i in 1:length(rfs)){plot(rfs[[i]])}
# mtext("Linkage groups with\nUPGMA information\n(including scaffolds)", cex = 2, side = 3, line = -63, at = 0.88, outer = TRUE)
# par(mfrow=c(1,1))
# #dev.off()
## Comparing number of markers in each group
comp = data.frame(UPGMA_Genomic = unlist(lapply(LGS.inter, function(x) length(x$seq$seq.num))),
Genomic = unlist(lapply(LGS.genomic, function(x) length(x$seq$seq.num))),
UPGMA = unlist(lapply(LGS.upgma, function(x) length(x$seq$seq.num))))
comp
LGS<-LGS.inter
## Performing parallel computation of hidden markov
phasing_and_hmm_rf <- function(X){
fl <- paste0("output_map_ch_", unique(X$seq$chrom), ".txt")
sink(fl)
map <- est_rf_hmm_sequential(input.seq = X$seq,
start.set = 3,
thres.twopt = 10,
thres.hmm = 50,
extend.tail = 30,
twopt = X$tpt,
verbose = TRUE,
phase.number.limit = 20,
sub.map.size.diff.limit = 5)
sink()
return(map)
}
# 5% genotyping error
my.error.func<-function(X){
x<-est_full_hmm_with_global_error(input.map = X,
error = 0.05,
tol = 10e-4,
verbose = FALSE)
return(x)
}
#upgma
#hidden markov based off physical location
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs <- parallel::parLapply(cl,LGS, phasing_and_hmm_rf)
parallel::stopCluster(cl)
plot_map_list(MAPs, col = "ggstyle")
# account for error
cl <- parallel::makeCluster(7)
parallel::clusterEvalQ(cl, require(mappoly))
parallel::clusterExport(cl, "dat")
MAPs.err <- parallel::parLapply(cl,MAPs,my.error.func)
parallel::stopCluster(cl)
par(mfrow=c(2,1))
plot_map_list(MAPs, col = "ggstyle")
plot_map_list(MAPs.err, col = "ggstyle")
plot_genome_vs_map(MAPs.err, same.ch.lg = T)
summary_maps(MAPs.err)
