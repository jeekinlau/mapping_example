data[[6]]$labels$title  = "Overall BLUEs Black spot"
data[[7]]$labels$title  = "Overall BLUEs Black spot"
data[[8]]$labels$title =  "2019 Cercospora"
data[[9]]$labels$title =  "2019 Cercospora"
data[[10]]$labels$title =  "2020 Cercospora"
data[[11]]$labels$title =  "2020 Cercospora"
data[[12]]$labels$title =  "2021 Cercospora"
data[[13]]$labels$title =  "2021 Cercospora"
data[[14]]$labels$title ="Overall BLUEs Cercospora"
data[[15]]$labels$title ="Overall BLUEs Cercospora"
data[[16]]$labels$title = "2019 Defoliaton"
data[[17]]$labels$title = "2020 Defoliation"
data[[18]]$labels$title = "2021 Defoliation"
data[[19]]$labels$title ="Overall BLUEs Defoliation"
library(ggpubr)
ggarrange(plotlist = data, ncol=5, nrow=4,labels = c(paste0(LETTERS[1:19],".")))
load("C:/Users/jeeki/Downloads/MBxGV_12152021_NovaSeq_NgoMIV_mappoly_dat (1).RData")
dat = MBxGV_12152021_NovaSeq_NgoMIV
plot(dat)
library(mappoly)
plot(dat)
dosage=export_data_to_polymapR(dat)
library(polymapR)
PCA_progeny(dosage, highlight = c("P1","P2","MyGirl"), colors = c("red","red","red"), log = NULL)
dat$chrom<-gsub("Chr01",1,dat$chrom)
dat$chrom<-gsub("Chr02",2,dat$chrom)
dat$chrom<-gsub("Chr03",3,dat$chrom)
dat$chrom<-gsub("Chr04",4,dat$chrom)
dat$chrom<-gsub("Chr05",5,dat$chrom)
dat$chrom<-gsub("Chr06",6,dat$chrom)
dat$chrom<-gsub("Chr07",7,dat$chrom)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.25, inter = T)
print(dat)
y
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.25, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.25, inter = F)
print(dat)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = T )
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
plot(seq.init)
plot(dat)
dat = MBxGV_12152021_NovaSeq_NgoMIV
plot(dat)
dat$chrom<-gsub("Chr01",1,dat$chrom)
dat$chrom<-gsub("Chr02",2,dat$chrom)
dat$chrom<-gsub("Chr03",3,dat$chrom)
dat$chrom<-gsub("Chr04",4,dat$chrom)
dat$chrom<-gsub("Chr05",5,dat$chrom)
dat$chrom<-gsub("Chr06",6,dat$chrom)
dat$chrom<-gsub("Chr07",7,dat$chrom)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.25, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.25, inter = F)
plot(dat)
dat = MBxGV_12152021_NovaSeq_NgoMIV
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.5, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.5, inter = F)
plot(dat)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = T )
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
#seq.init = make_seq_mappoly(dat,  arg="all")
plot(seq.init)
dat = MBxGV_12152021_NovaSeq_NgoMIV
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = T )
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
#seq.init = make_seq_mappoly(dat,  arg="all")
plot(seq.init)
dat = MBxGV_12152021_NovaSeq_NgoMIV
dat$chrom<-gsub("Chr01",1,dat$chrom)
dat$chrom<-gsub("Chr02",2,dat$chrom)
dat$chrom<-gsub("Chr03",3,dat$chrom)
dat$chrom<-gsub("Chr04",4,dat$chrom)
dat$chrom<-gsub("Chr05",5,dat$chrom)
dat$chrom<-gsub("Chr06",6,dat$chrom)
dat$chrom<-gsub("Chr07",7,dat$chrom)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.25, inter = F)
plot(dat)
dat = MBxGV_12152021_NovaSeq_NgoMIV
dat$chrom<-gsub("Chr01",1,dat$chrom)
dat$chrom<-gsub("Chr02",2,dat$chrom)
dat$chrom<-gsub("Chr03",3,dat$chrom)
dat$chrom<-gsub("Chr04",4,dat$chrom)
dat$chrom<-gsub("Chr05",5,dat$chrom)
dat$chrom<-gsub("Chr06",6,dat$chrom)
dat$chrom<-gsub("Chr07",7,dat$chrom)
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.25, inter = F)
plot(dat)
print(dat)
dat = MBxGV_12152021_NovaSeq_NgoMIV
dat$chrom<-gsub("Chr01",1,dat$chrom)
dat$chrom<-gsub("Chr02",2,dat$chrom)
dat$chrom<-gsub("Chr03",3,dat$chrom)
dat$chrom<-gsub("Chr04",4,dat$chrom)
dat$chrom<-gsub("Chr05",5,dat$chrom)
dat$chrom<-gsub("Chr06",6,dat$chrom)
dat$chrom<-gsub("Chr07",7,dat$chrom)
plot(dat)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.25, inter = T)
plot(dat)
print(dat)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = T )
plot(dat)
print(dat)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = T )
0.05/dat$n.mrk
0.10/dat$n.mrk
0.25/dat$n.mrk
0.01/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = T )
seq.init = make_seq_mappoly(mrks.chi.filt)
seq.init
## Making groups only with genomic information (tends to bring more markers, but also discards scaffolds)
LGS.genomic = vector("list", 7)
for (i in 1:7){
tempseq1 = make_seq_mappoly(dat, arg = paste0("seq",i), genomic.info = 1)
mrks = intersect(tempseq1$seq.mrk.names, seq.init$seq.mrk.names)
tempseq = make_seq_mappoly(dat, arg = mrks)
temptpt = est_pairwise_rf(tempseq, ncpus = 6)
rffilt = rf_snp_filter(input.twopt = temptpt, diagnostic.plot = FALSE)
temptpt2 = make_pairs_mappoly(temptpt, input.seq = rffilt)
LGS.genomic[[as.numeric(unique(rffilt$chrom))]] = list(seq = rffilt, tpt = temptpt2)
}
## Getting rf matrices
rfs.genomic = lapply(LGS.genomic, function(x) rf_list_to_matrix(x$tpt))
load("E:/diaqtl_rrd/diaQTL/rrd_newcompareprobes.Rdata")
scan1_summary(scan1a_X2021, thresh=alpha.05)
#diaQTL test run
library(diaQTL)
scan1_summary(scan1a_X2021, thresh=alpha.05)
get_map(data)
alpha.05 <- DIC_thresh(genome.size=6.69,num.parents=3,
ploidy=4,alpha=0.05)
alpha.1 <- DIC_thresh(genome.size=6.69,num.parents=3,
ploidy=4,alpha=0.1)
get_map(data)
alpha.05 <- DIC_thresh(genome.size=8,num.parents=3,
ploidy=4,alpha=0.05)
alpha.1 <- DIC_thresh(genome.size=8,num.parents=3,
ploidy=4,alpha=0.1)
scan1_summary(scan1a_X2021, thresh=alpha.05)
scan1_summary(scan1a_X2021b, thresh=alpha.05)
scan1_summary(scan1a_all, thresh=alpha.05)
scan1_summary(scan1a_CT, thresh=alpha.05)
scan1_summary(scan1a_X2021, thresh=alpha.05)
scan1_summary(scan1a_X2021, thresh=alpha.05)
scan1_summary(scan1a_X2021b, thresh=alpha.05)
scan1_summary(scan1a_all, thresh=alpha.05)
scan1_summary(scan1a_CT, thresh=alpha.05)
scan1_summary(scan1a_all, thresh=alpha.05)
scan1_summary(scan1a_CT, thresh=alpha.05)
scan1_summary(scan1a_all, thresh=alpha.05)
scan1_summary(scan1a_X2021, thresh=alpha.05)
scan1_summary(scan1a_X2021b, thresh=alpha.05)
scan1_summary(scan1a_all, thresh=alpha.05)
install.packages(c("BiocManager", "bslib", "callr", "commonmark", "data.table", "digest", "e1071", "evaluate", "ggplot2", "ggrepel", "gmp", "jsonlite", "lme4", "maps", "memuse", "minqa", "openssl", "pkgload", "plotly", "polyRAD", "processx", "ps", "ragg", "RcppEigen", "sys", "vegan", "xfun", "XML", "yaml", "zip"))
install.packages("data.table")
install.packages("ggplot2")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("ggplot2")
install.packages("data.table")
install.packages("C:/Users/jeeki/Downloads/asreml_4.1.0.176.zip",repos=NULL, type = "win.binary")
library(asreml)
detach("package:asreml", unload = TRUE)
devtools::install_github("mmollina/viewpoly")
viewpoly::run_app()
install.packages(c("gmp", "polyRAD", "RcppArmadillo", "rmarkdown", "rstatix", "viewpoly"))
viewpoly::run_app()
load("C:/Users/jeeki/Downloads/BExMG_phys_viewpoly.RData")
BExMG_phys$map
View(BExMG_phys)
load("C:/Users/jeeki/Downloads/SWxBE_phys_viewpoly.RData")
load("C:/Users/jeeki/Downloads/BExMG_phys_viewpoly.RData")
BExMG_phys$map[[5]]
View(BExMG_phys)
BExMG_phys$map$maps[[5]]
library(mappoly)
plot_map_list(BExMG_phys$map)
bexmg=BExMG_phys$map$maps[[5]]
swxbe=SWxBE_phys$map$maps[[5]]
View(bexmg)
View(swxbe)
viewpoly::run_app()
View(SWxBE_phys)
View(SWxBE_phys[["qtl"]][["qtl_info"]])
SWxBE_phys[["qtl"]][["qtl_info"]]
swxbe_qtl_table=SWxBE_phys[["qtl"]][["qtl_info"]]
swxbe_qtl_table$phys_pos =NA
swxbe_qtl_table
swxbe_qtl_table$phys_lower =NA
swxbe_qtl_table$phys_upper =NA
swxbe_qtl_table[i,1]
temp_map = swxbe_qtl_table[1,1]
swxbe_qtl_table[1,1]
temp_map = SWxBE_phys$map$maps[[swxbe_qtl_table[1,1]]]
SWxBE_phys_maps = rbind(SWxBE_phys$map$maps[[1]],
SWxBE_phys$map$maps[[2]],
SWxBE_phys$map$maps[[3]],
SWxBE_phys$map$maps[[4]],
SWxBE_phys$map$maps[[5]],
SWxBE_phys$map$maps[[6]],
SWxBE_phys$map$maps[[7]])
View(SWxBE_phys_maps)
swxbe_qtl_table
SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG)]
SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG &
SWxBE_phys_maps$l.dist ==swxbe_qtl_table$Pos   ),]
swxbe_qtl_table$phys_pos=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG &
SWxBE_phys_maps$l.dist ==swxbe_qtl_table$Pos   ),]
swxbe_qtl_table$phys_pos[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
SWxBE_phys_maps$l.dist ==swxbe_qtl_table$Pos[i]  ),]
for (i in 1:nrow(swxbe_qtl_table)){
swxbe_qtl_table$phys_pos[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
SWxBE_phys_maps$l.dist ==swxbe_qtl_table$Pos[i]  ),]
}
i=1
swxbe_qtl_table$phys_pos[i]
SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
SWxBE_phys_maps$l.dist ==swxbe_qtl_table$Pos[i]  ),]
SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] ,]
SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] ),]
View(SWxBE_phys_maps)
round(SWxBE_phys_maps$l.dist,digits=2)
SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
round(SWxBE_phys_maps$l.dist,digits=2) == swxbe_qtl_table$Pos[i]  ),]
swxbe_qtl_table
for (i in 1:nrow(swxbe_qtl_table)){
swxbe_qtl_table$phys_pos[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
round(SWxBE_phys_maps$l.dist,digits=2) ==swxbe_qtl_table$Pos[i]  ),]$g.dist
swxbe_qtl_table$phys_lower[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
round(SWxBE_phys_maps$l.dist,digits=2) ==swxbe_qtl_table$Pos_lower[i]  ),]$g.dist
swxbe_qtl_table$phys_upper[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
round(SWxBE_phys_maps$l.dist,digits=2) ==swxbe_qtl_table$Pos_upper[i]  ),]$g.dist
}
swxbe_qtl_table
round(0.000000,digits=2)
load("C:/Users/jeeki/Downloads/SWxBE.mappoly.maps.RData")
View(SWxBE_phys_maps)
viewpoly::run_app()
BExMG_qtl_table=BExMG_phys$qtl
View(BExMG_qtl_table)
BExMG_qtl_table=BExMG_phys$qtl$qtl_info
BExMG_qtl_table$phys_pos =NA
BExMG_qtl_table$phys_lower =NA
BExMG_qtl_table$phys_upper =NA
BExMG_phys_maps = rbind(BExMG_phys$map$maps[[1]],
BExMG_phys$map$maps[[2]],
BExMG_phys$map$maps[[3]],
BExMG_phys$map$maps[[4]],
BExMG_phys$map$maps[[5]],
BExMG_phys$map$maps[[6]],
BExMG_phys$map$maps[[7]])
for (i in 1:nrow(BExMG_qtl_table)){
BExMG_qtl_table$phys_pos[i]=BExMG_phys_maps[which(BExMG_phys_maps$g.chr==BExMG_qtl_table$LG[i] &
round(BExMG_phys_maps$l.dist,digits=2) ==BExMG_qtl_table$Pos[i]  ),]$g.dist
BExMG_qtl_table$phys_lower[i]=BExMG_phys_maps[which(BExMG_phys_maps$g.chr==BExMG_qtl_table$LG[i] &
round(BExMG_phys_maps$l.dist,digits=2) ==BExMG_qtl_table$Pos_lower[i]  ),]$g.dist
BExMG_qtl_table$phys_upper[i]=BExMG_phys_maps[which(BExMG_phys_maps$g.chr==BExMG_qtl_table$LG[i] &
round(BExMG_phys_maps$l.dist,digits=2) ==BExMG_qtl_table$Pos_upper[i]  ),]$g.dist
}
BExMG_qtl_table
SWxBE_phys_maps
BExMG_qtl_table
swxbe_qtl_table
load("C:/Users/jeeki/Downloads/SWxBE.mappoly.maps.RData")
librar(mappoly)
library(mappoly)
plot_map_list(MAPs.err)
load("C:/Users/jeeki/Downloads/BExMG.mappoly.maps.RData")
plot_map_list(MAPs.err)
viewpoly::run_app()
load("C:/Users/jeeki/Downloads/BExMG_viewpoly.RData")
load("C:/Users/jeeki/Downloads/SWxBE_viewpoly.RData")
BExMG_phys=BExMG_viewpoly
SWxBE_phys=SWxBE_viewpoly
SWxBE_phys=SWxBE_viewpoly
BExMG_phys=BExMG_viewpoly
swxbe_qtl_table = SWxBE_phys$qtl$qtl_info
BExMG_qtl_table = BExMG_phys$qtl$qtl_info
swxbe_qtl_table$phys_pos =NA
swxbe_qtl_table$phys_lower =NA
swxbe_qtl_table$phys_upper =NA
SWxBE_phys_maps = rbind(SWxBE_phys$map$maps[[1]],
SWxBE_phys$map$maps[[2]],
SWxBE_phys$map$maps[[3]],
SWxBE_phys$map$maps[[4]],
SWxBE_phys$map$maps[[5]],
SWxBE_phys$map$maps[[6]],
SWxBE_phys$map$maps[[7]])
for (i in 1:nrow(swxbe_qtl_table)){
swxbe_qtl_table$phys_pos[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
round(SWxBE_phys_maps$l.dist,digits=2) ==swxbe_qtl_table$Pos[i]  ),]$g.dist
swxbe_qtl_table$phys_lower[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
round(SWxBE_phys_maps$l.dist,digits=2) ==swxbe_qtl_table$Pos_lower[i]  ),]$g.dist
swxbe_qtl_table$phys_upper[i]=SWxBE_phys_maps[which(SWxBE_phys_maps$g.chr==swxbe_qtl_table$LG[i] &
round(SWxBE_phys_maps$l.dist,digits=2) ==swxbe_qtl_table$Pos_upper[i]  ),]$g.dist
}
BExMG_qtl_table=BExMG_phys$qtl$qtl_info
BExMG_qtl_table$phys_pos =NA
BExMG_qtl_table$phys_lower =NA
BExMG_qtl_table$phys_upper =NA
BExMG_phys_maps = rbind(BExMG_phys$map$maps[[1]],
BExMG_phys$map$maps[[2]],
BExMG_phys$map$maps[[3]],
BExMG_phys$map$maps[[4]],
BExMG_phys$map$maps[[5]],
BExMG_phys$map$maps[[6]],
BExMG_phys$map$maps[[7]])
for (i in 1:nrow(BExMG_qtl_table)){
BExMG_qtl_table$phys_pos[i]=BExMG_phys_maps[which(BExMG_phys_maps$g.chr==BExMG_qtl_table$LG[i] &
round(BExMG_phys_maps$l.dist,digits=2) ==BExMG_qtl_table$Pos[i]  ),]$g.dist
BExMG_qtl_table$phys_lower[i]=BExMG_phys_maps[which(BExMG_phys_maps$g.chr==BExMG_qtl_table$LG[i] &
round(BExMG_phys_maps$l.dist,digits=2) ==BExMG_qtl_table$Pos_lower[i]  ),]$g.dist
BExMG_qtl_table$phys_upper[i]=BExMG_phys_maps[which(BExMG_phys_maps$g.chr==BExMG_qtl_table$LG[i] &
round(BExMG_phys_maps$l.dist,digits=2) ==BExMG_qtl_table$Pos_upper[i]  ),]$g.dist
}
swxbe_qtl_table
BExMG_qtl_table
swxbe_qtl_table[sort(swxbe_qtl_table$LG),]
swxbe_qtl_table[order(swxbe_qtl_table$LG),]
BExMG_qtl_table
viewpoly::run_app()
viewpoly::run_app()
viewpoly::run_app()
bs_cs_df = read.csv("C:/Users/jeeki/Desktop/blackspot_paper/BExMG/all_locations_all_traits_BLUEs_just_years.csv")
rrd = read.csv("C:/Users/jeeki/Desktop/BLUEs vs QTL chart/ALL_blues_final.csv")
together = merge(bs_cs_df,rrd, by="genotype", all=T)
View(together)
together[,c(5,9,13,18)]
together=together[,c(5,9,13,18)]
bs_cs_df = read.csv("C:/Users/jeeki/Desktop/blackspot_paper/BExMG/all_locations_all_traits_BLUEs_just_years.csv")
rrd = read.csv("C:/Users/jeeki/Desktop/BLUEs vs QTL chart/ALL_blues_final.csv")
together = merge(bs_cs_df,rrd, by="genotype", all=T)
together=together[,c(1,5,9,13,18)]
together
together_normalized = apply(together,MARGIN = 2, scale)
together_normalized = apply(together[,2:5],MARGIN = 2, scale)
View(together_normalized)
together_normalized = cbind(together[,1],apply(together[,2:5],MARGIN = 2, scale))
View(together_normalized)
together_normalized = apply(together[,2:5],MARGIN = 2, scale)
as.data.frame(cbind(together[,1],together_normalized))
final=as.data.frame(cbind(together[,1],together_normalized))
View(final)
colnames(final)[1]="genotype"
View(final)
final$index = sum(final[,2:5],na.rm=T)
final$index = sum(final[,2:5])
final$index = sum(as.numeric(final[,2:5]))
View(final)
as.numeric(final[,2:5])
final$overall_BLUEs_B=as.numeric(final$overall_BLUEs_B)
final$overall_BLUEs_C=as.numeric(final$overall_BLUEs_C)
final$overall_BLUEs_D=as.numeric(final$overall_BLUEs_D)
final$sev_BLUEs = as.numeric(final$sev_BLUEs)
final$index = sum(final[,2:5])
View(final)
final$index = lapply(final[,2:5], sum)
final$index = final$overall_BLUEs_B+final$overall_BLUEs_C+final$overall_BLUEs_D+final$sev_BLUEs
View(final)
final$index = rowSums(final[,2:5]na.rm=T)
final$index = rowSums(final[,2:5],na.rm=T)
View(final)
final[order(final$index),]
final_ordered=final[order(final$index),]
final_ordered$genotype
final_ordered$genotype[1:10]
blues_index_10=final_ordered$genotype[1:10]
saveRDS(blues_index_10)
saveRDS(blues_index_10, file="blues_index_10.RDS")
blues_index_10=final_ordered$genotype
saveRDS(blues_index_10, file="blues_index.RDS")
View(final)
install.packages(c("bit", "data.table", "datawizard", "easystats", "insight", "markdown", "Matrix", "matrixStats", "osqp", "parameters", "performance", "pkgbuild", "plyr", "roxygen2", "RSQLite", "sass", "see", "shinyWidgets", "vctrs", "xfun"))
devtools::install_github("mmollina/mappoly", dependencies=TRUE)
setwd("~/GitHub/mapping_example")
library(mappoly)
dat = read_geno_csv(file="data/BExMG_subset.csv", ploidy = 4)
ALL_dosages =  export_data_to_polymapR(dat)
screened_data3 <- screen_for_duplicate_individuals(dosage_matrix = screened_data2,
cutoff = 0.95,
plot_cor = T)
ALL_dosages =  export_data_to_polymapR(dat)
screened_data <- screen_for_duplicate_individuals(dosage_matrix = ALL_dosages,
cutoff = 0.95,
plot_cor = T)
library(polymapR)
ALL_dosages =  export_data_to_polymapR(dat)
screened_data <- screen_for_duplicate_individuals(dosage_matrix = ALL_dosages,
cutoff = 0.95,
plot_cor = T)
View(screened_data)
PCA_progeny(screened_data)
library(polymapR)
ALL_dosages =  export_data_to_polymapR(dat)
screened_data <- screen_for_duplicate_individuals(dosage_matrix = ALL_dosages,
cutoff = 0.95,
plot_cor = T)
PCA_progeny(screened_data)
cor(ALL_dosages)
correlations=cor(ALL_dosages)
View(correlations)
correlations=cor(ALL_dosages, use = "pairwise.complete.obs")
View(correlations)
data=read.csv("data/BExMG_subset.csv")
View(data)
View(screened_data)
removed_dups=cbind(data[,1:5],screened_data[,3:ncol(screened_data)])
View(removed_dups)
data=read.csv("data/BExMG_subset.csv")
removed_dups=cbind(data[,1:5],screened_data[,3:ncol(screened_data)])
write.csv(removed_dups,"BExMG_subset_removed_dup.csv")
summary_maps(MAPs.err)
setwd("~/GitHub/mapping_example/tutorial")
library(mappoly)
dat = read_geno_csv(file="../data/BExMG_subset.csv", ploidy = 4)
mappoly::vcf
setwd("~/GitHub/mapping_example/tutorial")
dat = read_geno_csv(file="../data/BExMG_subset_removed_dup.csv", ploidy = 4)
dat = read_geno_csv(file="../data/BExMG_subset_removed_dup.csv", ploidy = 4)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.05, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.05, inter = F)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
## Accounting for recombination fractions
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 6)
## Getting group information (UPGMA)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
dat = read_geno_csv(file="../data/BExMG_subset_removed_dup.csv", ploidy = 4)
## Filtering dataset by marker
dat = filter_missing(input.data = dat, type = "marker",
filter.thres = 0.05, inter = F)
## Filtering dataset by individual
dat = filter_missing(input.data = dat, type = "individual",
filter.thres = 0.05, inter = F)
## Filter according to segregation test
pval.bonf = 0.05/dat$n.mrk
mrks.chi.filt = filter_segregation(dat, chisq.pval.thres =  pval.bonf, inter = F)
seq.init = make_seq_mappoly(mrks.chi.filt)
## Accounting for recombination fractions
all.rf.pairwise = est_pairwise_rf(input.seq = seq.init, ncpus = 6)
mat = rf_list_to_matrix(all.rf.pairwise)
## Getting group information (UPGMA)
grs = group_mappoly(input.mat = mat,
expected.groups = 7,
comp.mat = TRUE,
inter = F)
grs
library(mappoly)
library(qtlpoly)
genoprob = readRDS("genoprob.err.nodup.RDS")
library(mappoly)
library(qtlpoly)
genoprob = readRDS("genoprob.err.nodup.RDS")
data = read_data(ploidy = 4, geno.prob = genoprob, pheno = "../data/pheno_RRD.csv", step = 1)
View(genoprob)
View(dat)
pheno=read.csv("../data/pheno_RRD.csv")
phenotype=read.csv("../data/pheno_RRD.csv")
data = read_data(ploidy = 4, geno.prob = genoprob, pheno = phenotype, step = 1)
View(phenotype)
phenotype=read.csv("../data/pheno_RRD.csv",row.names = 1)
data = read_data(ploidy = 4, geno.prob = genoprob, pheno = phenotype, step = 1)
data.sim <- simulate_qtl(data = data, mu = 0, h2.qtl = NULL, var.error = 1,
n.sim = 1000, missing = TRUE, seed = 123)
score.null <- null_model(data = data.sim$results, n.clusters = 6, plot = NULL)
data.sim <- simulate_qtl(data = data, mu = 0, h2.qtl = NULL, var.error = 1,
n.sim = 1000, missing = TRUE, seed = 123)
score.null <- null_model(data = data.sim$results, n.clusters = 1, plot = NULL)
remim.mod <- remim(data = data, w.size = 15, d.sint = 1.5, n.clusters = 4)
plot_profile(data = data, model = remim.mod, grid = TRUE, sup.int =T)
plot_sint(data = data, model = remim.mod)
